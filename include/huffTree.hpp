#ifndef HUFFTREE_HPP
#define HUFFTREE_HPP

/*
 * ====================================================================================================
 *  Classe da árvore de Huffman
 * ====================================================================================================  
 */
class Node{
    private:
        /*
         * ====================================================================================================
         * Atributos da classe
         * ----------------------------------------------------------------------------------------------------
         * 
         * character      : Caractere de cada nó da árvore de Huffman
         * frequency      : Frequência de cada caractere
         * code           : Novo código gerado para cada caractere
         * 
         * ====================================================================================================
         */
        char character;
        int frequency;
        std::string code;
        
    public:
        /*
         * ====================================================================================================
         * Atributos da classe
         * ----------------------------------------------------------------------------------------------------
         * 
         * left       : Ponteiro para o nó da esquerda
         * right      : Ponteiro para o nó da direita
         * 
         * ====================================================================================================
         */
        Node *left;
        Node *right;

        /*
         * ====================================================================================================
         * Método         : Node
         * ----------------------------------------------------------------------------------------------------
         * Descrição      : Construtor da classe da árvore de Huffman
         * 
         * Parâmetros
         *      character : Caractere do nó 
         *      frequency : Frequencia do nó
         * 
         * Retorno        : Vazio
         * 
         * ====================================================================================================
         */
        Node(char, int);

        /*
         * ====================================================================================================
         * Método         : Node
         * ----------------------------------------------------------------------------------------------------
         * Descrição      : Sobrecarga do construtor da classe da árvore de Huffman
         * 
         * Parâmetros
         *      leftNode  : Nó da esquerda do novo nó
         *      rightNode : Nó da direita do novo nó 
         * 
         * Retorno        : Vazio
         * 
         * ====================================================================================================
         */
        Node(Node *, Node *);

        /*
         * ====================================================================================================
         * Método         : ~Node
         * ----------------------------------------------------------------------------------------------------
         * Descrição      : Destrutor da classe da árvore de Huffman
         * 
         * Parâmetros
         * 
         * Retorno        : Vazio
         * 
         * ====================================================================================================
         */
        ~Node();

        /*
         * ====================================================================================================
         * Método         : getCharacter
         * ----------------------------------------------------------------------------------------------------
         * Descrição      : Retorna o caractere do nó
         * 
         * Parâmetros
         * 
         * Retorno        : Caractere do nó
         * 
         * ====================================================================================================
         */
        char getCharacter();

        /*
         * ====================================================================================================
         * Método         : getFrequency
         * ----------------------------------------------------------------------------------------------------
         * Descrição      : Retorna a frequência do nó
         * 
         * Parâmetros
         * 
         * Retorno        : Frequencia do nó
         * 
         * ====================================================================================================
         */
        int getFrequency();

        void print(); //Debug only

        /*
         * ====================================================================================================
         * Método         : fillCode
         * ----------------------------------------------------------------------------------------------------
         * Descrição      : Percorre pelos nós até os nós folhas e seta o código encontrado para cada um deles
         * 
         * Parâmetros
         *      code      : String contendo o código temporário de cada nó folha
         * 
         * Retorno        : Vazio
         * 
         * ====================================================================================================
         */
        void fillCode(std::string);

        /*
         * ====================================================================================================
         * Método         : fillCode
         * ----------------------------------------------------------------------------------------------------
         * Descrição      : Sobrecarga do método de preenchimento do código de cada nó folha para preenhcher
         *                  o mapa de códigos dos caracteres
         * 
         * Parâmetros
         *      codeMap   : Mapa de códigos dos caracteres a ser preenchido
         * 
         * Retorno        : Vazio
         * 
         * ====================================================================================================
         */
        void fillCode(std::map<char,std::string>*);
};

#endif